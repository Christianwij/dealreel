# Task ID: 11
# Title: Build Investor Dashboard
# Status: done
# Dependencies: 2, 3, 4, 8, 9, 10
# Priority: medium
# Description: Create a comprehensive dashboard for investors to manage their uploaded documents, view generated briefings, access summaries, and track their deal evaluation history.
# Details:
1. Design dashboard layout with key sections:
   - Recent uploads
   - Completed briefings
   - In-progress items
   - Deal ratings and summaries
   - Profile management

2. Implement dashboard data fetching:
```typescript
const Dashboard: React.FC = () => {
  const [uploads, setUploads] = useState([]);
  const [briefings, setBriefings] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  
  useEffect(() => {
    const fetchDashboardData = async () => {
      setIsLoading(true);
      
      try {
        // Get user ID
        const { data: { user } } = await supabase.auth.getUser();
        
        if (!user) return;
        
        // Fetch recent uploads
        const { data: uploadsData } = await supabase
          .from('uploads')
          .select('*')
          .eq('user_id', user.id)
          .order('created_at', { ascending: false })
          .limit(10);
          
        setUploads(uploadsData || []);
        
        // Fetch briefings
        const { data: briefingsData } = await supabase
          .from('briefings')
          .select('*, uploads(*), summaries(*)')
          .eq('user_id', user.id)
          .order('created_at', { ascending: false })
          .limit(10);
          
        setBriefings(briefingsData || []);
      } catch (error) {
        console.error('Error fetching dashboard data:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchDashboardData();
    
    // Set up real-time subscription for updates
    const uploadsSubscription = supabase
      .channel('uploads-changes')
      .on('postgres_changes', {
        event: '*',
        schema: 'public',
        table: 'uploads',
        filter: `user_id=eq.${user?.id}`
      }, (payload) => {
        fetchDashboardData();
      })
      .subscribe();
      
    const briefingsSubscription = supabase
      .channel('briefings-changes')
      .on('postgres_changes', {
        event: '*',
        schema: 'public',
        table: 'briefings',
        filter: `user_id=eq.${user?.id}`
      }, (payload) => {
        fetchDashboardData();
      })
      .subscribe();
      
    return () => {
      supabase.removeChannel(uploadsSubscription);
      supabase.removeChannel(briefingsSubscription);
    };
  }, []);
  
  return (
    <div className="container mx-auto py-8 px-4">
      <h1 className="text-2xl font-bold mb-6">Your Investment Dashboard</h1>
      
      {isLoading ? (
        <div className="flex justify-center py-12">
          <LoadingSpinner />
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div>
            <h2 className="text-xl font-semibold mb-4">Recent Uploads</h2>
            <UploadsList uploads={uploads} />
            
            <div className="mt-8">
              <h2 className="text-xl font-semibold mb-4">Upload New Document</h2>
              <UploadComponent />
            </div>
          </div>
          
          <div>
            <h2 className="text-xl font-semibold mb-4">Your Briefings</h2>
            <BriefingsList briefings={briefings} />
          </div>
        </div>
      )}
    </div>
  );
};
```

3. Create briefing list component:
```typescript
const BriefingsList: React.FC<{ briefings: any[] }> = ({ briefings }) => {
  if (briefings.length === 0) {
    return (
      <div className="bg-gray-50 rounded p-6 text-center">
        <p>No briefings yet. Upload a document to get started.</p>
      </div>
    );
  }
  
  return (
    <div className="space-y-4">
      {briefings.map((briefing) => (
        <div key={briefing.id} className="border rounded p-4 hover:shadow-md transition">
          <div className="flex justify-between items-start">
            <div>
              <h3 className="font-semibold">{briefing.uploads.filename}</h3>
              <p className="text-sm text-gray-500">
                Created: {new Date(briefing.created_at).toLocaleDateString()}
              </p>
              <div className="mt-2 flex items-center">
                <span className="text-sm font-medium mr-2">Status:</span>
                <StatusBadge status={briefing.status} />
              </div>
            </div>
            
            {briefing.rating && (
              <div className="bg-blue-100 text-blue-800 font-bold rounded-full w-10 h-10 flex items-center justify-center">
                {briefing.rating}
              </div>
            )}
          </div>
          
          {briefing.status === 'completed' && (
            <div className="mt-4 flex gap-2">
              <Link href={`/briefings/${briefing.id}`}>
                <a className="px-3 py-1 bg-blue-600 text-white text-sm rounded">
                  View Briefing
                </a>
              </Link>
              
              {briefing.summaries?.length > 0 && (
                <Link href={`/summaries/${briefing.summaries[0].id}`}>
                  <a className="px-3 py-1 bg-green-600 text-white text-sm rounded">
                    View Summary
                  </a>
                </Link>
              )}
            </div>
          )}
        </div>
      ))}
    </div>
  );
};
```

4. Create briefing detail page
5. Implement dashboard filters and search
6. Add pagination for large collections
7. Create analytics section for usage statistics

# Test Strategy:
1. Test dashboard loading with various user states
2. Validate real-time updates with database changes
3. Test responsive layout across device sizes
4. Verify correct display of briefing statuses
5. Test navigation between dashboard sections
6. Validate data fetching performance
7. Test dashboard with large numbers of uploads and briefings

# Subtasks:
## 1. Design and implement dashboard layout [done]
### Dependencies: None
### Description: Create the UI design and layout structure for the Investor Dashboard
### Details:
Design the overall dashboard layout including navigation, sidebar, main content area, and responsive behavior. Implement the base component structure with proper styling using CSS/SCSS. Create reusable layout components like cards, panels, and grid systems that will be used throughout the dashboard.

## 2. Implement data fetching and state management [done]
### Dependencies: 11.1
### Description: Set up data fetching from Supabase and implement state management for the dashboard
### Details:
Configure Supabase client and authentication. Implement data fetching hooks/services for investor data, briefings, and uploads. Set up global state management using Context API or Redux to handle application state. Create loading states, error handling, and data caching mechanisms for optimal performance.

## 3. Build upload and briefing components [done]
### Dependencies: 11.1, 11.2
### Description: Implement components for handling document uploads and investor briefings
### Details:
Create file upload component with drag-and-drop functionality and progress indicators. Implement briefing components to display investor information and documents. Add functionality for viewing, downloading, and managing uploaded documents. Implement form validation and error handling for all input components.

## 4. Implement filtering and search functionality [done]
### Dependencies: 11.2, 11.3
### Description: Add search and filtering capabilities to the dashboard
### Details:
Create search input components with autocomplete functionality. Implement filtering mechanisms for briefings, uploads, and other dashboard data. Add sorting options for different data views. Ensure search and filtering operations are optimized for performance with debouncing and proper state management.

## 5. Develop analytics and user profile management [done]
### Dependencies: 11.2, 11.4
### Description: Implement analytics visualizations and user profile management features
### Details:
Create data visualization components for investor analytics using charts and graphs. Implement user profile management with settings and preferences. Add performance metrics and dashboard statistics. Ensure all analytics components are responsive and provide meaningful insights to investors.

