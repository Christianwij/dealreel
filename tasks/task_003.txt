# Task ID: 3
# Title: Design Database Schema
# Status: done
# Dependencies: 1
# Priority: high
# Description: Create the Supabase Postgres database schema for storing uploads, investor profiles, briefings, summaries, and Q&A sessions.
# Details:
1. Design and implement the following tables in Supabase:

```sql
-- Users table (extends Supabase auth.users)
CREATE TABLE investor_profiles (
  id UUID REFERENCES auth.users NOT NULL PRIMARY KEY,
  industry_focus TEXT[] DEFAULT '{}',
  stage_preference TEXT[] DEFAULT '{}',
  important_kpis TEXT[] DEFAULT '{}',
  red_flags TEXT[] DEFAULT '{}',
  preferred_tone TEXT DEFAULT 'concise',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Uploads table
CREATE TABLE uploads (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  user_id UUID REFERENCES auth.users NOT NULL,
  filename TEXT NOT NULL,
  file_type TEXT NOT NULL,
  file_size INTEGER NOT NULL,
  storage_path TEXT NOT NULL,
  status TEXT DEFAULT 'pending',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Briefings table
CREATE TABLE briefings (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  upload_id UUID REFERENCES uploads NOT NULL,
  user_id UUID REFERENCES auth.users NOT NULL,
  video_url TEXT,
  script JSON,
  status TEXT DEFAULT 'processing',
  rating INTEGER,
  comments TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Summaries table
CREATE TABLE summaries (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  briefing_id UUID REFERENCES briefings NOT NULL,
  content TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Q&A sessions table
CREATE TABLE qna_sessions (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  briefing_id UUID REFERENCES briefings NOT NULL,
  questions JSON DEFAULT '[]',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

2. Set up Row Level Security (RLS) policies for each table
3. Create database triggers for updated_at timestamps
4. Configure database indexes for performance optimization

# Test Strategy:
1. Verify table creation and relationships with test queries
2. Test RLS policies with different user contexts
3. Validate constraints and default values
4. Benchmark query performance with sample data
5. Test database migrations for future schema changes

# Subtasks:
## 1. Implement Core Database Tables [done]
### Dependencies: None
### Description: Create the five main tables in Supabase Postgres as specified in the schema design
### Details:
Execute the SQL statements to create investor_profiles, uploads, briefings, summaries, and qna_sessions tables with all specified columns, data types, and constraints. Ensure proper foreign key relationships between tables.

## 2. Set Up Row Level Security Policies [done]
### Dependencies: 3.1
### Description: Implement RLS policies for each table to ensure proper data access control
### Details:
Create RLS policies that restrict users to only access their own data. For each table, implement policies for SELECT, INSERT, UPDATE, and DELETE operations that check user_id against auth.uid() or appropriate relationships.

## 3. Create Database Triggers for Timestamps [done]
### Dependencies: 3.1
### Description: Implement triggers to automatically update the updated_at timestamp columns
### Details:
Create a function that sets updated_at to NOW() and create triggers for investor_profiles, briefings, and qna_sessions tables to call this function on UPDATE operations.

## 4. Configure Database Indexes [done]
### Dependencies: 3.1
### Description: Add appropriate indexes to optimize query performance
### Details:
Create indexes on frequently queried columns including user_id in uploads, briefing_id in summaries and qna_sessions, and upload_id in briefings. Consider composite indexes for common query patterns.

## 5. Implement Data Validation Constraints [done]
### Dependencies: 3.1
### Description: Add CHECK constraints and validation rules to ensure data integrity
### Details:
Add constraints to validate data such as: status values must be from predefined sets, file_size must be positive, rating must be within a specific range (e.g., 1-5), and required fields cannot be empty.

